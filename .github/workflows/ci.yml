name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          save-always: true
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          save-always: true
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --all-features

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cargo-build
          path: |
            target/
            Cargo.lock
          retention-days: 1

  unit-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          save-always: true
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cargo-build

      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --test unit

  integration-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          save-always: true
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cargo-build

      - name: Check Docker Compose
        run: docker compose version

      - name: Start mock server
        run: |
          docker compose -f docker-compose.test.yaml up -d oauth2-mock
          sleep 3

      - name: Run integration tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --test integration
        env:
          RUST_BACKTRACE: 1
          RUST_LOG: debug

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yaml down

  notify:
    needs: [unit-test, integration-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          save-always: true
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Get Build Info
        id: build-info
        run: |
          echo "warnings=$(cargo clippy 2>&1 | grep warning | wc -l)" >> $GITHUB_OUTPUT
          echo "unit_tests=$(cargo test --test unit -- --list | wc -l)" >> $GITHUB_OUTPUT
          echo "integration_tests=$(cargo test --test integration -- --list | wc -l)" >> $GITHUB_OUTPUT

      - name: Calculate Duration
        id: duration
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ github.event.head_commit.timestamp || github.event.pull_request.created_at }}))
          echo "time=$(date -u -d @${duration} +"%M min %S sec")" >> $GITHUB_OUTPUT

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,took
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ jobs.unit-test.result == 'success' && jobs.integration-test.result == 'success' && '#36a64f' || '#dc3545' }}",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ jobs.unit-test.result == 'success' && jobs.integration-test.result == 'success' && '✅ CI Pipeline Succeeded' || '❌ CI Pipeline Failed' }}",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Test Results:*\nUnit Tests: ${{ jobs.unit-test.result }}\nIntegration Tests: ${{ jobs.integration-test.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Build Stats:*\nTests: ${{ steps.build-info.outputs.unit_tests }} unit, ${{ steps.build-info.outputs.integration_tests }} integration\nWarnings: ${{ steps.build-info.outputs.warnings }}"
                        }
                      ]
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Duration:* ${{ steps.duration.outputs.time }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}